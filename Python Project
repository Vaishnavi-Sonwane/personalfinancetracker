import tkinter as tk
from tkinter import messagebox
import openpyxl
import os
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

filename = "PROJECT_FINAL.xlsx"

def calculate_savings(expenses, income):
    grocery_savings = expenses[0][0] - expenses[0][1]
    clothing_savings = expenses[1][0] - expenses[1][1]
    travelling_savings = expenses[2][0] - expenses[2][1]
    other_savings = income - expenses[3] - sum([expense[1] for expense in expenses[:3]])
    total_savings = grocery_savings + clothing_savings + travelling_savings + other_savings
    return grocery_savings, clothing_savings, travelling_savings, other_savings, total_savings

def generate_graphs(report_window, expenses):
    categories = ['Grocery', 'Clothing', 'Travelling', 'Other']
    values = [expenses[0][1], expenses[1][1], expenses[2][1], expenses[3]]

    chart_frame = tk.Frame(report_window)
    chart_frame.pack()

    # Bar Chart
    fig1 = plt.Figure(figsize=(4, 4))
    ax1 = fig1.add_subplot(111)
    ax1.bar(categories, values)
    ax1.set_title('Expense Comparison')
    bar_canvas = FigureCanvasTkAgg(fig1, master=chart_frame)
    bar_canvas.get_tk_widget().pack(side=tk.LEFT)
    bar_canvas.draw()

    # Pie Chart
    fig2 = plt.Figure(figsize=(4, 4))
    ax2 = fig2.add_subplot(111)
    ax2.pie(values, labels=categories, autopct='%1.1f%%', startangle=90)
    ax2.set_title('Expense Distribution')
    pie_canvas = FigureCanvasTkAgg(fig2, master=chart_frame)
    pie_canvas.get_tk_widget().pack(side=tk.RIGHT)
    pie_canvas.draw()

def generate_report(user_name, income, expenses, total_savings, month):
    report_window = tk.Toplevel()
    report_window.title("Expense Report")

    categories = ['Grocery', 'Clothing', 'Travelling', 'Other']

    tk.Label(report_window, text=f'User: {user_name}').pack()

    for i in range(4):
        if i < 3:
            budget = expenses[i][0]
            actual = expenses[i][1]
            savings = budget - actual
        else:
            budget = 'N/A'
            actual = expenses[i]
            savings = 'N/A'
        tk.Label(report_window, text=f'{categories[i]} - Budget: {budget}, Expense: {actual}, Savings: {savings}').pack()

    tk.Label(report_window, text=f"Total Savings: {total_savings}").pack()
    goal_text = "Achieved ✅" if total_savings >= expenses[4] else "Not Achieved ❌"
    tk.Label(report_window, text=f"Goal: {goal_text}").pack()

    # Save to Excel
    if os.path.exists(filename):
        workbook = openpyxl.load_workbook(filename)
        sheet = workbook.active
    else:
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(['User', 'Month', 'Total Savings', 'Goal', 'Grocery Expense', 'Clothing Expense', 'Travelling Expense', 'Other Expense'])

    sheet.append([user_name, month, total_savings, goal_text,
                 expenses[0][1], expenses[1][1], expenses[2][1], expenses[3]])
    workbook.save(filename)

    messagebox.showinfo("Saved", f"Report saved to {filename}")
    generate_graphs(report_window, expenses)

def add_expenses(user_name, income, month):
    exp_window = tk.Toplevel()
    exp_window.title("Enter Expenses")

    entries = {}

    fields = [
        "Grocery Budget", "Clothing Budget", "Travelling Budget",
        "Grocery Expense", "Clothing Expense", "Travelling Expense",
        "Other Expenses", "Overall Goal"
    ]

    for i, field in enumerate(fields):
        tk.Label(exp_window, text=field).grid(row=i, column=0)
        entry = tk.Entry(exp_window)
        entry.grid(row=i, column=1)
        entries[field] = entry

    def submit():
        try:
            grocery_budget = int(entries["Grocery Budget"].get())
            clothing_budget = int(entries["Clothing Budget"].get())
            travelling_budget = int(entries["Travelling Budget"].get())
            grocery_expense = int(entries["Grocery Expense"].get())
            clothing_expense = int(entries["Clothing Expense"].get())
            travelling_expense = int(entries["Travelling Expense"].get())
            other_expense = int(entries["Other Expenses"].get())
            goal = int(entries["Overall Goal"].get())

            expenses = [
                [grocery_budget, grocery_expense],
                [clothing_budget, clothing_expense],
                [travelling_budget, travelling_expense],
                other_expense,
                goal
            ]

            _, _, _, _, total_savings = calculate_savings(expenses, income)
            savings_label.config(text=f"Total Savings: {total_savings}")
            generate_report(user_name, income, expenses, total_savings, month)

        except ValueError:
            messagebox.showerror("Error", "Please enter valid numbers.")

    tk.Button(exp_window, text="Submit", command=submit).grid(row=8, column=0, columnspan=2)

# Main Window
root = tk.Tk()
root.title("Personal Finance Tracker")

tk.Label(root, text="Enter your name").pack()
name_entry = tk.Entry(root)
name_entry.pack()

tk.Label(root, text="Enter your total income").pack()
income_entry = tk.Entry(root)
income_entry.pack()

tk.Label(root, text="Enter the month").pack()
month_entry = tk.Entry(root)
month_entry.pack()

savings_label = tk.Label(root, text="")
savings_label.pack()

def on_input_expenses():
    try:
        name = name_entry.get()
        income = int(income_entry.get())
        month = month_entry.get()
        add_expenses(name, income, month)
    except ValueError:
        messagebox.showerror("Input Error", "Enter a valid income.")

tk.Button(root, text="Input Expenses", command=on_input_expenses).pack()

root.mainloop()
